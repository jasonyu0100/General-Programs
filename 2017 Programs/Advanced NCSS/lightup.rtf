{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 def check_for_light(board,coordinate):\
  row_one = coordinate[0]\
  col_one = coordinate[1]\
  length = len(board[0])\
  for row_sign,col_sign in zip([1,-1],[0,0]):\
    for change in range(1,length):\
      row_two = row_one + change*row_sign\
      col_two = col_one + change*col_sign\
      if row_two < 0 or col_two < 0 or row_two > length-1 or col_two > length-1:\
        break\
      value = board[row_two][col_two]\
      if value == 'L':\
        return True\
      if value == 'X' or value in list('01234'):\
        break\
  for row_sign,col_sign in zip([0,0],[1,-1]):\
    for change in range(1,length):\
      row_two = row_one + change*row_sign\
      col_two = col_one + change*col_sign\
      if row_two < 0 or col_two < 0 or row_two > length-1 or col_two > length-1:\
        break\
      value = board[row_two][col_two]\
      if value == 'L':\
        return True\
      if value == 'X' or value in list('01234'):\
        break\
    return False\
\
\
def check_for_number(board,coordinate):\
  row_one = coordinate[0]\
  col_one = coordinate[1]\
  num_lights = int(board[row_one][col_one])\
  length = len(board[0])\
  count = 0\
  for row_change,col_change in zip([1,-1,0,0],[0,0,1,-1]):\
    row_two = row_one+row_change\
    col_two = col_one+col_change\
    if row_two < 0 or col_two < 0 or row_two > length-1 or col_two > length-1:\
      pass\
    elif board[row_two][col_two] == 'L':\
      count += 1\
    if count > num_lights:\
      return True\
  return count\
  \
def board_is_happy(board):\
  for row_num,row in enumerate(board):\
    for col_num,value in enumerate(row):\
      if value == 'L':\
        if check_for_light(board,[row_num,col_num]) is True:\
          return False\
      if value in list('01234'):\
        if check_for_number(board,[row_num,col_num]) is True:\
          return False\
  return True  # TODO\
\
def get_empty_coordinates(board):\
  empty = set()\
  for row_pos,row in enumerate(board):\
    for col_pos,value in enumerate(row):\
      if value == '.':\
        empty.add((row_pos,col_pos))    \
  return empty\
\
def get_squares_lit(board,coordinate):\
  row_one = coordinate[0]\
  col_one = coordinate[1]\
  length = len(board[0])\
  squares_lit = set()\
  for row_sign,col_sign in zip([1,-1],[0,0]):\
    for change in range(1,length):\
      row_two = row_one + change*row_sign\
      col_two = col_one + change*col_sign\
      if row_two < 0 or col_two < 0 or row_two > length-1 or col_two > length-1:\
        break\
      value = board[row_two][col_two]\
      if value =='.':\
        squares_lit.add((row_two,col_two))\
      elif value == 'X':\
        break\
      elif value in list('01234'):\
        break\
  for row_sign,col_sign in zip([0,0],[1,-1]):\
    for change in range(1,length):\
      row_two = row_one + change*row_sign\
      col_two = col_one + change*col_sign\
      if row_two < 0 or col_two < 0 or row_two > length-1 or col_two > length-1:\
        break\
      value = board[row_two][col_two]\
      if value =='.':\
        squares_lit.add((row_two,col_two))\
      elif value == 'X':\
        break\
      elif value in list('01234'):\
        break\
  return squares_lit\
\
def board_is_solved(board):\
  empty_places = get_empty_coordinates(board)\
  total_squares_lit = set()\
  for row_num,row in enumerate(board):\
    for col_num,value in enumerate(row):\
      if value == 'L':\
        for element in get_squares_lit(board,[row_num,col_num]):\
          total_squares_lit.add(element)\
      if value in list('01234'):\
        if check_for_number(board,[row_num,col_num]) != int(value):\
          return False\
  if total_squares_lit == empty_places:\
    return True\
  return False  # TODO\
\
\
def get_board_state(board):\
  if board_is_happy(board):\
    if board_is_solved(board):\
      return 'solved'\
    else:\
      return 'happy'\
  else:\
    return 'unhappy'\
  \
if __name__ == '__main__':\
  # Example board, happy state.\
  print(get_board_state('''\
....\
.L.L\
....\
....'''.strip().split('\\n')))\
  print(get_board_state('''\
...1.0.\
X......\
..X.X..\
X...L.X\
..X.3..\
.L....X\
L3L2...'''.strip().split('\\n')))\
  # Example board, solved state.\
  print(get_board_state('''\
..L1.0.\
X...L..\
L.X.X.L\
X...L.X\
..XL3L.\
.L....X\
L3L2L..'''.strip().split('\\n')))\
  # Example board, unhappy state.\
  print(get_board_state('''\
L..1L0.\
X.L....\
L.X.X.L\
X...L.X\
..XL3L.\
.L....X\
L3L2L..'''.strip().split('\\n')))\
  # Different board, happy state.\
  print(get_board_state('''\
L1.L.\
..L3L\
..X1.\
.1...\
.....'''.strip().split('\\n')))\
}