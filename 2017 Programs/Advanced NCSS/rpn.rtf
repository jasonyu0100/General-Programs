{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 def RPN_CALC(input_data):\
  RPN = [val for val in input_data]\
  stack = []\
  for value in RPN:\
    if value in list('+-*^'):\
      operator = value\
      list_two = stack.pop()\
      list_one = stack.pop()\
      try:\
        final = str(eval(list_one+operator+list_two))\
      except:\
        if operator == '+':\
          final = addition_operator(list_one,list_two)\
        elif operator == '-':\
          final = subtraction_operator(list_one,list_two)\
        elif operator == '*':\
          final = multiplication_operator(list_one,list_two)\
        elif operator == '^':\
          final = exponentiation_operator(list_one,list_two)\
      finally:\
        stack.append(final)\
    else:\
      stack.append([value])\
  if len(RPN) == 0:\
    print('')\
  elif len(RPN) <= 1:\
    print(RPN[0])\
  elif len(final) < 1:\
    print('0')\
  else:\
    string = convert_to_string(final)\
    print(string)\
def convert_to_string(final):\
  organised_final = organise_stack(final)\
  degrees = sorted(organised_final,reverse = True)\
  sorted_final = []\
  for degree in degrees:\
    sorted_final.append(organised_final[degree][0])\
  sorted_final_string = ''\
  for pos,value in enumerate(sorted_final):\
    data = get_math_data(value)\
    pronumeral = data[2]\
    num_val = data[0]\
    if pronumeral is not False:\
      if num_val == '1' or num_val == '-1':\
        if value.startswith('1'):\
          value = value[1:]\
        elif value.startswith('-1'):\
          value = value[0]+value[2:]\
    if pos == 0:\
      sorted_final_string += value\
      continue\
    if value.startswith('-'):\
      sorted_final_string += ' - '\
      sorted_final_string += value[1:]\
    else:\
      sorted_final_string += ' + '\
      sorted_final_string += value\
  return(''.join(sorted_final_string))\
def organise_stack(stack):\
  degree_dict = \{\}\
  for value in stack:\
    degree = get_math_data(value)[1]\
    if degree in degree_dict:\
      degree_dict[degree].append(value)\
    else:\
      degree_dict[degree] = [value]\
  for degree_values in degree_dict:\
    values = degree_dict[degree_values]\
    if len(values) > 1:\
      new_value = sum_values([values[0]],values[1:])\
      degree_dict[degree_values] = new_value\
  return degree_dict\
\
def sum_values(current_val,stack):\
  if len(stack) < 1:\
    return current_val\
  else:\
    second_val = stack.pop()\
    current_val = addition_operator(current_val,[second_val])\
    return sum_values(current_val,stack)\
  \
def get_math_data(item):\
  all_math_symbol = list('0123456789')+list('+-*^')\
  degree = 0\
  pronumeral = False\
  if item.startswith('-'):\
    sign = True\
    item = item[1:]\
  else:\
    sign = False\
  if item[0] not in all_math_symbol:\
    num_value = '1'\
    pronumeral = item[0]\
  else:\
    num_value = ''\
    for pos,val in enumerate(item):\
      if val.isdigit():\
        num_value += val\
      else:\
        if val not in all_math_symbol:\
          pronumeral = val\
        break\
  for pos,val in enumerate(item):\
    if val == '^':\
      degree = int(''.join([num for num in item[pos+1:] if num.isdigit()]))\
  if sign is not False:\
    num_value = '-'+num_value\
  if degree == 0 and pronumeral is not False:\
    degree = 1\
  return (num_value,degree,pronumeral)\
def addition_operator(list_one,list_two):\
  new_string = []\
  for pos_1,val_1 in enumerate(list_one):\
    data_1 = get_math_data(val_1)\
    num_val_1 = data_1[0]\
    degree_1 = data_1[1]\
    pronumeral_1 = data_1[2]\
    completion_bool = False\
    if num_val_1 == '0':\
      break\
    for pos_2,val_2 in enumerate(list_two):\
      data_2 = get_math_data(val_2)\
      num_val_2 = data_2[0]\
      degree_2 = data_2[1]\
      pronumeral_2 = data_2[2]\
      if num_val_2 == '0':\
        list_two.remove(val_2)\
        break\
      if degree_1 == degree_2 and pronumeral_1 == pronumeral_2:\
        list_two.remove(val_2)\
        completion_bool = True\
        net_num_val = eval(num_val_1+'+'+num_val_2)\
        if net_num_val == 0: break\
        if pronumeral_1 == False: pronumeral = ''\
        else: pronumeral = pronumeral_1\
        if degree_1 > 1: degree = '^'+str(degree_1)\
        else: degree = ''\
        new_string.append(str(net_num_val)+pronumeral+degree)\
        break\
    if completion_bool is False:\
      new_string.append(val_1)\
  for leftover_val in list_two:\
    data_2 = get_math_data(leftover_val)\
    num_val_2 = data_2[0]\
    degree_2 = data_2[1]\
    pronumeral_2 = data_2[2]\
    new_string.append(leftover_val)\
  return new_string\
def subtraction_operator(list_one,list_two):\
  new_string = []\
  for pos_1,val_1 in enumerate(list_one):\
    completion_bool = False\
    data_1 = get_math_data(val_1)\
    num_val_1 = data_1[0]\
    degree_1 = data_1[1]\
    pronumeral_1 = data_1[2]\
    if num_val_1 == '0':\
      break\
    for pos_2,val_2 in enumerate(list_two):\
      data_2 = get_math_data(val_2)\
      num_val_2 = data_2[0]\
      degree_2 = data_2[1]\
      pronumeral_2 = data_2[2]\
      if num_val_2 == '0':\
        list_two.remove(val_2)\
        break\
      if degree_1 == degree_2 and pronumeral_1 == pronumeral_2:\
        list_two.remove(val_2)\
        completion_bool = True\
        net_num_val = eval(num_val_1+'-'+num_val_2)\
        if net_num_val == 0: break\
        if pronumeral_1 == False: pronumeral = ''\
        else: pronumeral = pronumeral_1\
        if degree_1 > 1: degree = '^'+str(degree_1)\
        else: degree = ''\
        new_string.append(str(net_num_val)+pronumeral+degree)\
        break\
    if completion_bool is False:\
      new_string.append(val_1)\
  for leftover_val in list_two:\
    data_2 = get_math_data(leftover_val)\
    num_val_2 = data_2[0]\
    degree_2 = data_2[1]\
    pronumeral_2 = data_2[2]\
    new_string.append('-'+leftover_val)\
  return new_string\
def multiplication_operator(list_one,list_two):\
  new_string = []\
  for pos_1,val_1 in enumerate(list_one):\
    data_1 = get_math_data(val_1)\
    num_val_1 = data_1[0]\
    degree_1 = data_1[1]\
    pronumeral_1 = data_1[2]\
    for pos_2,val_2 in enumerate(list_two):\
      data_2 = get_math_data(val_2)\
      num_val_2 = data_2[0]\
      degree_2 = data_2[1]\
      pronumeral_2 = data_2[2]\
      net_num_val = eval(num_val_1+'*'+num_val_2)\
      if net_num_val == 0: continue\
      if pronumeral_1 == False and pronumeral_2 == False: \
        pronumeral = ''\
        degree_1 = 0\
        degree_2 = 0\
      elif pronumeral_2 == False: pronumeral = pronumeral_1\
      else: pronumeral = pronumeral_2\
      degree = '^'+str(degree_1+degree_2)\
      if degree_1+degree_2 < 2: degree = ''\
      new_string.append(str(net_num_val)+pronumeral+degree)\
      continue\
  return new_string\
def exponentiation_operator(list_one,list_two):\
  new_string = []\
  def apply_exponential(original_list,current_list,count_val,exponent):\
    count_val += 1\
    if count_val == exponent:\
      return current_list\
    current_list = multiplication_operator(current_list,original_list)\
    return apply_exponential(original_list,current_list,count_val,exponent)\
  if list_two[0] == '0':\
    return ['1']\
  if len(list_two) == 1 and list_two[0].isdigit():\
    new_val = apply_exponential(list_one,list_one,0,int(list_two[0]))\
    return new_val\
  for pos_1,val_1 in enumerate(list_one):\
    data_1 = get_math_data(val_1)\
    num_val_1 = data_1[0]\
    degree_1 = data_1[1]\
    pronumeral_1 = data_1[2]\
    completion_bool = False\
    for pos_2,val_2 in enumerate(list_two):\
      completion_bool = True\
      data_2 = get_math_data(val_2)\
      num_val_2 = data_2[0]\
      degree_2 = data_2[1]\
      pronumeral_2 = data_2[2]\
      if pronumeral_1 == False and pronumeral_2 == False:\
        net_num_val = eval(val_1+'**'+val_2)\
        new_string.append(str(net_num_val))\
        continue\
      net_num_val = num_val_1\
      if net_num_val == 0: continue\
      if val_1.isdigit(): degree_1 = 1\
      if pronumeral_1 == False: pronumeral = ''\
      else: pronumeral = pronumeral_1\
      exponential = multiplication_operator([str(degree_1)],[str(val_2)])\
      degree = '^'+str(exponential[0])\
      new_string.append(str(net_num_val)+pronumeral+degree)\
      continue\
    if completion_bool is False:\
      new_string.append(val_1)\
  return new_string\
RPN = input("RPN: ").split()\
RPN_CALC(RPN)\
#print(addition_operator(['4','5'],['5','7x']))\
#print(subtraction_operator(['-5'],['4x']))\
#print(multiplication_operator(['2x^2'],['x^3']))\
#print(exponentiation_operator(['2x^2'],['2']))\
#print(addition_operator(['2x^2', '6x', '6x', '18'],['4x^2', '8x', '-4x', '-8']))\
#print(RPN_CALC("x 2 ^ 3 - 1 2 x * - *".split()))\
#(RPN_CALC("2 x 3 + 2 ^ * 4 x 1 - x 2 + * * + 3 x 1 + * + 4 x * - 6 +".split()))\
}