{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 from PIL import Image\
#value - [istopline,isrightline,isbotline,isleftline,diagtopright,diagbotright,diagbotleft,diagtopleft,isdot]\
alpaDic = \{(False,True,True,False,False,False,False,False,False):'A',\
           (False,True,True,True,False,False,False,False,False):'B',\
           (False,False,True,True,False,False,False,False,False):'C',\
           (True,True,True,False,False,False,False,False,False):'D',\
           (True,True,True,True,False,False,False,False,False):'E',\
           (True,False,True,True,False,False,False,False,False):'F',\
           (True,True,False,False,False,False,False,False,False):'G',\
           (True,True,False,True,False,False,False,False,False):'H',\
           (True,False,False,True,False,False,False,False,False):'I',\
           (False,True,True,False,False,False,False,False,True):'J',\
           (False,True,True,True,False,False,False,False,True):'K',\
           (False,False,True,True,False,False,False,False,True):'L',\
           (True,True,True,False,False,False,False,False,True):'M',\
           (True,True,True,True,False,False,False,False,True):'N',\
           (True,False,True,True,False,False,False,False,True):'O',\
           (True,True,False,False,False,False,False,False,True):'P',\
           (True,True,False,True,False,False,False,False,True):'Q',\
           (True,False,False,True,False,False,False,False,True):'R',\
           (False,False,False,False,False,True,True,False,False):'S',\
           (False,False,False,False,True,True,False,False,False):'T',\
           (False,False,False,False,False,False,True,True,False):'U',\
           (False,False,False,False,True,False,False,True,False):'V',\
           (False,False,False,False,False,True,True,False,True):'W',\
           (False,False,False,False,True,True,False,False,True):'X',\
           (False,False,False,False,False,False,True,True,True):'Y',\
           (False,False,False,False,True,False,False,True,True):'Z',\
           (False,False,False,False,True,True,True,True,False):' '\}\
def main():\
  letters = []\
  image = Image.open(input("Enter path: "))\
  global height\
  global width\
  width = image.width\
  height = image.height\
  hugeList = []\
  for y in range(height):\
    temp = ''\
    for x in range(width):\
      if image.getpixel((x,y)) != 255:\
        #darkCoods.append((x,y))\
        temp+='%'\
      else:\
        temp+='.'\
    hugeList.append(temp)\
  \
  final = cull(hugeList)\
  #print(final)\
  letters = []\
  for glyph in final:\
    letters.append(decoder(glyph))\
  print("".join(letters))\
  \
  \
  \
def decoder(glyph):\
  isT,isR,isB,isL,isDTR,isDBR,isDBL,isDTL,isDot = False, False, False, False, False, False, False, False, False\
  flipped = []\
  size = len(glyph[0])\
  mid = int(size/2)\
  for x in range(len(glyph[0])):\
    flipped.append("".join([row[x] for row in glyph]))\
  #rint(flipped)\
  \
  if glyph[0] == '%'*size:\
    isT = True\
  if glyph[-1] == '%'*size:\
    isB = True\
  if flipped[0] == '%'*size:\
    isL = True\
  if flipped[-1] == '%'*size:\
    isR = True\
  #rint('glyp',glyph)\
  #rint(glyph[mid][0],glyph[-1][mid],glyph[mid][-1],glyph[mid][0],glyph[mid][1],glyph[-1][mid-1],glyph[mid][-2],glyph[mid][1])\
  if glyph[mid][0] == '%' and glyph[-1][mid] == '%' and glyph[mid][-1] == '%' and glyph[mid][0] == '%' and glyph[mid][1] != '%' and glyph[-1][mid-1] != '%' and glyph[mid][-2] != '%' and glyph[mid][1] != '%':\
    isDTR,isDBR,isDBL,isDTL = True,True,True,True\
  elif glyph[mid][0] == '%' and glyph[0][-1] == '%' and glyph[mid+1][0]  != '%' and glyph[0][-2] != '%':\
    isDTL = True\
    isDBL = True\
  elif glyph[-1][mid] == '%' and glyph[1][1] == '%' and glyph[-1][mid+1] != '%' and glyph[1][2] != '%':\
    isDBL = True\
    isDBR = True\
  elif glyph[mid][-1] == '%' and glyph[-1][0] == '%' and glyph[mid+1][-1] != '%' and glyph[0][1] != '%':\
    isDBR = True\
    isDTR = True\
  elif glyph[0][mid] == '%' and glyph[-1][-1] == '%'and glyph[0][mid+1] != '%' and glyph[-1][-2] != '%':  \
    isDTR = True\
    isDTL = True\
  \
  if glyph[mid][mid] == '%':\
    isDot = True\
\
  #print((isT,isR,isB,isL,isDTR,isDBR,isDBL,isDTL,isDot))\
  letter = alpaDic[(isT,isR,isB,isL,isDTR,isDBR,isDBL,isDTL,isDot)]\
  return letter\
\
    \
  \
  \
def cull(hugeList):\
  \
  for i,line in enumerate(hugeList):\
    if line == '.'*width:\
      hugeList[i] = '#'*width\
  for i,line in enumerate(hugeList):\
    hugeList[i] = line.strip('#')\
  glyphRow = []\
  tempRow = []\
  for line in hugeList:\
    if line:\
      tempRow.append(line)\
    else:\
      if tempRow:\
        glyphRow.append(tempRow)\
      tempRow = []\
      \
      \
  glyphCol = []\
  for row in glyphRow:\
    if not row:\
      pass\
    glyphCol.append(flip(row,len(row[0])))\
    \
  for x,col in enumerate(glyphCol):\
    for i,line in enumerate(col):\
      if line == '.'*len(line):\
        glyphCol[x][i] = '#'*len(line)\
        \
  for x,col in enumerate(glyphCol):\
    for i,line in enumerate(col):\
      glyphCol[x][i] = line.strip('#')\
  seperate = []\
  temp = []\
  for col in glyphCol:\
    for line in col:\
      if line:\
        temp.append(line)\
      else:\
        if temp:\
          seperate.append(temp)\
        temp = []\
  seperate = [flip(x,len(x[0])) for x in seperate]\
  \
  for x,gly in enumerate(seperate):\
    for i,line in enumerate(gly):\
      if line == '.'*len(line):\
        seperate[x][i] = '#'*len(line)\
  if i == 0:\
    return seperate\
  for x,gly in enumerate(seperate):   \
    for i,line in enumerate(gly):\
      seperate[x][i] = line.strip('#')\
  for i,x in enumerate(seperate):\
    seperate[i] = list(filter(('').__ne__, x))\
  return seperate\
  \
def flip(board,width):\
  column = []\
  for x in range(width):\
    column.append("".join([row[x] for row in board]))\
\
  return column\
\
\
\
main()}