{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 class Node:\
  def __init__(self, prefix='', all_words=set()):\
    """\
    Creates a Node with the given string prefix.\
    """\
    self.prefix = prefix\
    self.all_words = all_words\
    self.nodes = set()\
\
  def get_prefix(self):\
    """\
    Returns the string prefix for this node.\
    """\
    return self.prefix\
  \
  def get_children(self):\
    """\
    Returns a list of child Node objects, in any order.\
    """\
    prefixes = set()\
    \
    for word in self.words():\
    	if word != self.prefix:\
        	prefixes.add(word[:len(self.prefix)+1])\
        \
    for prefix in prefixes:\
    	self.nodes.add(Node(prefix))\
\
    return list(self.nodes)\
  \
  def is_word(self):\
    """\
    Returns True if this node prefix is also a complete word.\
    """\
    return self.prefix in self.all_words\
  \
  def add_word(self, word):\
    """\
    Adds the complete word into the trie, causing child nodes to be created as needed.\
    """\
    self.all_words.add(word)\
  \
  def find(self, prefix):\
    """\
    Returns the node that matches the given prefix, or None if not found.\
    """\
    node = Node(prefix, self.all_words)\
    return node if any(prefix in w for w in self.all_words) else None\
  \
  def words(self):\
    """\
    Returns a list of complete words that start with my prefix.\
    """\
    return sorted([w for w in self.all_words if w.startswith(self.prefix)])\
    \
\
if __name__ == '__main__':\
  # Write your test code here. This code will not be run by the marker.\
\
  # The first example in the question.\
  root = Node('')\
  for word in ['tea', 'ted', 'ten']:\
    root.add_word(word)\
  node = root.find('te')\
  print(node.get_prefix())\
  print(node.is_word())\
  print(node.words())\
\
  # The second example in the question.\
  root = Node('')\
  for word in ['inn', 'in', 'into', 'idle']:\
    root.add_word(word)\
  node = root.find('in')\
  print(node.get_prefix())\
  children = node.get_children()\
  print(sorted([n.get_prefix() for n in children]))\
  print(node.is_word())\
  print(node.words())\
\
  # The third example in the question.\
  with open('the-man-from-snowy-river.txt') as f:\
    words = f.read().split()\
  root = Node('')\
  for word in words:\
    root.add_word(word)\
  print(root.find('th').words())}