{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 from exceptions import PermissionDenied\
\
\
class Post:\
  def __init__(self, content, author):\
    self.content = content\
    self.author = author\
    self.upvotes = []\
    """\
    Creates a new Post by the author with the given content.\
    You will need to track up votes more cleverly than previously because\
    a user is only allowed to vote *once*.\
    """\
    pass\
  \
  def get_author(self):\
    """\
    Returns the author of the Post.\
    """\
    return self.author\
  \
  def get_content(self):\
    """\
    Returns the content of the Post.\
    """\
    return self.content\
  \
  def get_upvotes(self):\
    """\
    Returns a non-negative integer representing the total number of upvotes.\
    """\
    return len(self.upvotes)\
  \
  def set_content(self, content, by_user):\
    if self.author is not by_user:\
      raise PermissionDenied\
    self.content = content\
    self.author = by_user\
        \
    """\
    Called when the given user wants to update the content.\
    * raises PermissionDenied if the given user is not the author.\
    """\
    pass\
  \
  def upvote(self, by_user):\
    if by_user not in self.upvotes:\
      self.upvotes.append(by_user)\
    """\
    Called when the given user wants to upvote this post.\
    A user can only perform an up vote *once*.\
    """\
    pass\
}